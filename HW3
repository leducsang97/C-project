//**************************  main.cpp  ****************************
#include <iostream>
#include "DLL.h"

int main(int argc, const char* argv[])
{
	list<int> v;

	v.insert(v.end(), 2);
	v.insert(v.end(), 4);
	v.insert(v.end(), 5);

	auto iter = v.begin();
	iter = v.insert(iter, 1); // Insert 1 before 2
	iter++; // Points to 2
	v.insert(iter++, 3); // Insert 3 before 2, advance to 4
	iter++; // Points to 5
	v.insert(iter, 10); // Insert 10 before 5

	iter = v.begin();
	iter++; // Points to 3
	v.erase(iter); // Erase 3

	for (auto itr = v.begin(); itr != v.end(); itr++)
		std::cout << *itr << std::endl;

	return 0;
}

//**************************  DLL.h  *********************************

#ifndef DOUBLY_LINKED_LIST
#define DOUBLY_LINKED_LIST

template<class T>
class DLLNode {
public:
	DLLNode() {
		next = prev = nullptr;
	}
	DLLNode(const T& el, DLLNode *n = nullptr, DLLNode *p = nullptr) {
		info = el; next = n; prev = p;
	}
	T info;
	DLLNode *next, *prev;
};

template<class T>
class list {
public:
	list() {
		head = tail = nullptr;
	}
	bool isEmpty() const {
		return head == nullptr;
	}
	list(const list<T>& other) = delete;
	list(list<T>&& other) = delete;
	~list() {
		while (head->next != nullptr) {
			DLLNode<T>* temp = head;
			head = head->next;
			delete temp;
		}
		delete head;
	}

	list<T>& operator=(const list<T>& other) = delete;
	list<T>& operator=(list<T>&& other) = delete;

	//Inner clas iteration
	class iterator {
		friend class list;
	private:
		DLLNode<T> *DLLNodePtr;
		iterator(DLLNode<T> *newPtr) : DLLNodePtr(newPtr) {}
	public:
		iterator() :DLLNodePtr(nullptr) {}
		// Overload for the comparison operator !=
		bool operator!=(const iterator& itr) const {
			return DLLNodePtr != itr.DLLNodePtr;
		}

		// Overload for the dereference operator *
		T& operator*() const {
			return DLLNodePtr->info;
		}

		// Overload for the postincrement operator ++
		iterator operator++(int) {
			iterator temp = *this;
			if (temp.DLLNodePtr != nullptr)
				DLLNodePtr = DLLNodePtr->next;
			return temp;
		}
	}; // End of inner class iterator

	iterator begin() const {
		return iterator(head);
	}

	iterator end() const {
		return iterator(nullptr);
	}

	iterator insert(iterator position, const T& value) {
		if (position.DLLNodePtr == nullptr) {
			if (head == nullptr) {
				DLLNode<T>* newNode = new DLLNode<T>(value, head, tail);
				head = tail = newNode;
				position.DLLNodePtr = newNode;
			}
			else {
				DLLNode<T>* newNode = new DLLNode<T>(value, nullptr, tail);
				tail->next = newNode;
				tail = newNode;
				position.DLLNodePtr = newNode;
			}
		}
		else {
			if (position.DLLNodePtr == head) {
				head = new DLLNode<T>(value, head, nullptr);
				head->next->prev = head;
				position.DLLNodePtr = head;
			}
			else {
				DLLNode<T>* newNode = new DLLNode<T>(value, position.DLLNodePtr, position.DLLNodePtr->prev);
				position.DLLNodePtr->prev = newNode;
				newNode->prev->next = newNode;
				position.DLLNodePtr = newNode;
			}
		}

		return position;
	}

	iterator erase(iterator position) {
		if (position.DLLNodePtr != nullptr) {
			DLLNode<T> *toDelete = position.DLLNodePtr;
			if (toDelete == tail) {
				tail = position.DLLNodePtr->prev;
				position.DLLNodePtr = nullptr;
			}
			if (toDelete == head) {
				head = position.DLLNodePtr->next;
				position.DLLNodePtr = head;
			}
			else {

				position.DLLNodePtr->next->prev = position.DLLNodePtr->prev;
				position.DLLNodePtr->prev->next = position.DLLNodePtr->next;
				position.DLLNodePtr = position.DLLNodePtr->next;
			}
			delete toDelete;
			return position;
		}
	}

private:
	DLLNode<T> *head;
	DLLNode<T> *tail;
};
#endif
