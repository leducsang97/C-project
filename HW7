*************************	BTree.h		*********************************
#include <fstream>

template <typename T, int M>
class BTree;

template <typename T, int M>
class BTreeNode {
	friend class BTree<T, M>;
public:
	BTreeNode() {
		keyTally = 0;
		for (int i = 0; i < M; ++i) {
			pointers[i] = nullptr;
		}
	}
	BTreeNode(const T& el) {
		keys[0] = el;  keyTally = 1; 
		for (int i = 0; i < M; ++i) {
			pointers[i] = nullptr;
		}
	};
private:
	bool leaf;
	int keyTally;
	T keys[M - 1];
	BTreeNode* pointers[M];
};

template <typename T, int M>
class BTree {
public:
	//initiate a tree
	BTree() {
	root = nullptr;
	}

	void BTreeInsert(const T& key) { 
		if (BTreeSearch(root, key) == nullptr) {
			BTreeInsert(root, key);
		}
	}

	void BTreeDelete(const T& key) { 
		if (root != nullptr) 
			BTreeDelete(root, key);
	}

	void BTreeTraversal() { 
		if (root != nullptr)
			BTreeTraversal(root);
	}

private:
	BTreeNode<T, M>* root;
	BTreeNode<T,M> *BTreeSearch(BTreeNode<T,M> *node,const T& k) {
		// Find the first key greater than or equal to k
		if (node != nullptr) {
			int i;
			for (i = 1; i <= node->keyTally && k > node->keys[i]; i++);
			if (i > node->keyTally || node->keys[i - 1] > k)
				return BTreeSearch(node->pointers[i - 1],k);
			else return node;
		}
		else return nullptr;
	}

	void BTreeInsert(BTreeNode<T, M>* &node, const T& key) {
		// If tree is empty
		if (node == nullptr)
		{	// Allocate memory for root
		root = new BTreeNode<T,M>(key); // Insert key
		root->leaf = true;
		}
		else {
			//if node is full, split
			if (node->keyTally == M - 1) { 
				//if node is root
				if (node == root) {
					BTreeNode<T, M>* newRoot = new BTreeNode<T, M>();
					newRoot->leaf = false;
					newRoot->pointers[0] = root;
					root = newRoot;
					BTreeInsert(newRoot, key);
					return;
				}
			}

			int k = 0;
			while (node->keys[k] < key && k < node->keyTally) ++k;
			//if the node is not a leaf, search the children 
			if (node->leaf==false) {
				//if the children are full, split
				if (node->pointers[k]->keyTally == M - 1) { 
					int newRoot; //newRoot for more balanced tree postsplit
					//determine the middle keys as the newRoot
					if (M % 2 != 0 && key >= node->pointers[k]->keys[M / 2])
					{
						newRoot = M / 2;
					}
					else newRoot = M / 2 - 1;


					BTreeNode<T, M>* node1 = new BTreeNode<T, M>();
					node1->pointers[0] = node->pointers[k]->pointers[0];
					for (int i = 0; i < newRoot; ++i) {
						node1->keys[i] = node->pointers[k]->keys[i];
						node1->pointers[i + 1] = node->pointers[k]->pointers[i + 1];
						node1->keyTally++;
					}
					BTreeNode<T, M>* node2 = new BTreeNode<T, M>();
					node2->pointers[0] = node->pointers[k]->pointers[newRoot + 1];
					for (int i = newRoot + 1; i < M - 1; ++i) {
						node2->keys[i - (newRoot + 1)] = node->pointers[k]->keys[i];
						node2->pointers[i - newRoot] = node->pointers[k]->pointers[i + 1];
						node2->keyTally++;
					}

					//move allof the bigger value and pointer to the left.
					node1->leaf = node2->leaf = node->pointers[k]->leaf;
					for (int j = node->keyTally - 1; j >= k; j--) {
						node->keys[j + 1] = node->keys[j];
						node->pointers[j + 2] = node->pointers[j + 1];
					}
					//assign new root and link 2 nodes
					node->keys[k] = node->pointers[k]->keys[newRoot];
					node->pointers[k] = node1;
					node->pointers[k + 1] = node2;
					node->keyTally++;
					if (key > node->keys[k]) {
						BTreeInsert(node->pointers[k+1], key);
					}
					else BTreeInsert(node->pointers[k], key);
				}
				else BTreeInsert(node->pointers[k], key);
			}
			else {
				for (int h = node->keyTally - 1; h >= k; h--)
					node->keys[h + 1] = node->keys[h];
					node->keys[k] = key;
					node->keyTally++;
			}
		}
	}

	void BTreeMerge(BTreeNode<T, M>* &node, int k) { 
		//merge node->pointers[k] and node->pointers[k+1]
		node->pointers[k]->keys[node->pointers[k]->keyTally] = node->keys[k];
		++node->pointers[k]->keyTally;
		for (int i = 0; i < node->pointers[k + 1]->keyTally; ++i) {
			node->pointers[k]->keys[node->pointers[k]->keyTally] = node->pointers[k + 1]->keys[i];
			node->pointers[k]->pointers[node->pointers[k]->keyTally] = node->pointers[k + 1]->pointers[i];
			++node->pointers[k]->keyTally;
		}
		node->pointers[k]->pointers[node->pointers[k]->keyTally] = node->pointers[k + 1]->pointers[node->pointers[k + 1]->keyTally];
		delete node->pointers[k + 1];
		if (node == root && node->keyTally == 1) {
			BTreeNode<T, M>* toDelete = node;
			root = node->pointers[k];
			delete toDelete;
			return;
		}
		for (int i = k + 1; i < node->keyTally; ++i) {
			node->keys[i - 1] = node->keys[i];
			node->pointers[i] = node->pointers[i + 1];
		}
		node->pointers[node->keyTally] = nullptr;
		--node->keyTally;
	}

	void BTreeDelete(BTreeNode<T, M>* &node, const T& key) {
		int k = 0;
		for (k; node->keys[k] < key && k < node->keyTally; k++) {}
		//if node is leaf, 
		if (node->leaf=true) {
			//if delete make the tree empty, delete tree.		
			if (node == root && node->keyTally == 0) {
				delete root;
				return;
			}
			if (node->keys[k] != key) {
				return;
			}
			//move to the left to fill the hole
			for (int i = k; i < node->keyTally - 1; i++) {
				node->keys[i] = node->keys[i + 1];
			}
				node->keyTally--;
				return;
		}
		else {
			//if cannot find in node, find in their children
			if (node->keys[k] != key) {
				BTreeDelete(node->pointers[k], key);
			}
			else {
				BTreeNode<T, M> *temp = node->pointers[k];
				if (temp = nullptr) {
					//move to the left to fill the hole
					for (int i = k; i < node->keyTally - 1; i++) {
						node->keys[i] = node->keys[i + 1];
						node->keyTally--;
						return;
					}
				}
				else {
					//find the succesor
					while (temp->pointers[temp->keyTally] != nullptr)
						temp = temp->pointers[temp->keyTally];

					T succ = temp->keys[temp->keyTally - 1];
					node->keys[k] = succ;
					//delete succesor in its nodes
					BTreeDelete(node->pointers[k], succ);
				}
			}
		}

		if (!node->pointers[k]->leaf)
			if (node->pointers[k]->keyTally == 0)
				node->pointers[k] = node->pointers[k]->pointers[0];
		if (node->pointers[k]->keyTally >= M / 2) return;
		if (k > 0) {
			if (node->pointers[k - 1]->keyTally > M / 2) {
				//check left sibling node if it needs to be merged
				while (node->pointers[k]->keyTally < M / 2) {
					BTreeInsert(node->pointers[k], node->keys[k]);
					node->keys[k - 1] = node->pointers[k - 1]->keys[node->pointers[k - 1]->keyTally - 1];
					BTreeDelete(node->pointers[k - 1], node->keys[k]);
				}
				return;
			}
			else if (node->pointers[k - 1]->keyTally <= M / 2) {
				if (node->pointers[k - 1]->keyTally + node->pointers[k]->keyTally <= M - 2) {
					BTreeMerge(node, k - 1);
					return;
				}
			}
		}

		if (k < node->keyTally) {
			if (node->pointers[k + 1]->keyTally > M / 2) { 
				//do same thing with right sibling node
				while (node->pointers[k]->keyTally < M / 2) {
					BTreeInsert(node->pointers[k], node->keys[k]);
					node->keys[k] = node->pointers[k + 1]->keys[0];
					BTreeDelete(node->pointers[k + 1], node->keys[k]);
				}
				return;
			}
			else if (node->pointers[k + 1]->keyTally <= M / 2) {
				if (node->pointers[k]->keyTally + node->pointers[k + 1]->keyTally <= M - 2) {
					//merge with right sibling node
					BTreeMerge(node, k);
					return;
				}
			}
		}
	}

	void BTreeTraversal(BTreeNode<T, M>* &node) {
		int i;
		for (i = 0; i < node->keyTally; i++)
		{
			if (node->leaf == false)
			BTreeTraversal(node->pointers[i]);
			std::cout << " " << node->keys[i];
		}
		// Print the subtree rooted with last child
		if (node->leaf == false)
			BTreeTraversal(node->pointers[i]);
	}
	
};

***********************************	main.cpp	***************************************
#include <iostream>
#include <fstream>
#include "BTree.h"

int main() {
	BTree<int, 7> tree;

	std::ifstream in;
	in.open("insert.txt");

	int temp_input;
	while (in >> temp_input)
		tree.BTreeInsert(temp_input);

	in.close();

	in.open("delete.txt");
	while (in >> temp_input)
		tree.BTreeDelete(temp_input);

	tree.BTreeTraversal();

	std::cout << std::endl << "Execution successful." << std::endl;
}
